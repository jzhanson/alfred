import argparse
parser = argparse.ArgumentParser()

# General arguments
parser.add_argument('-s', '--seed', type=int, default=0, help='random seed')
parser.add_argument('-lr', '--lr', type=float, default=0.01, help='learning rate')
parser.add_argument('--optimizer', type=str, default='adam', help='optimizer (\'sgd\', \'rmsprop\', \'adam\', or \'adam-amsgrad\') to use (default: \'adam\')')
parser.add_argument('-mgn', '--max-grad-norm', type=float, default=50, help='maximum grad norm before clamping (default: 50)')
parser.add_argument('-fs', '--frame-stack', type=int, default=1, help='number of frames to stack')
parser.add_argument('-zffs', '--zero-fill-frame-stack', dest='zero_fill_frame_stack', action='store_true', help='fill frames with zeros when frame stacking on early steps')
parser.add_argument('-fffs', '--first-fill-frame-stack', dest='zero_fill_frame_stack', action='store_false', help='replicate first frame when frame stacking on early steps')
parser.set_defaults(zero_fill_frame_stack=False)
parser.add_argument('-vm', '--visual-model', type=str, default='naturecnn', help='which visual model to use (\'naturecnn\', \'resnet\', or \'maskrcnn\')')
parser.add_argument('-pm', '--policy-model', type=str, default='fc', help='which policy model to use (\'fc\' or \'lstm\')')
parser.add_argument('-fl', '--fc-layers', type=int, default=1, help='number of fc layers')
parser.add_argument('-lhs', '--lstm-hidden-dim', type=int, default=64, help='hidden dimension of lstm layers (only used if not using object embedding as initial hidden state)')
parser.add_argument('-ll', '--lstm-layers', type=int, default=1, help='number of lstm layers')
parser.add_argument('-rcf', '--resnet-conv-feat', dest='resnet_conv_feat', action='store_true', help='use conv feat (skip last two resnet-18 layers)')
parser.add_argument('-rll', '--resnet-last-layers', dest='resnet_conv_feat', action='store_false', help='use second-to-last resnet-18 fc layer')
parser.set_defaults(resnet_conv_feat=True)
parser.add_argument('-pvm', '--pretrained-visual-model', dest='pretrained_visual_model', action='store_true', help='if using resnet-18 or maskrcnn, use pretrained weights')
parser.add_argument('-bvm', '--blank-visual-model', dest='pretrained_visual_model', action='store_false', help='if using resnet-18 or maskrcnn, use blank model')
parser.set_defaults(pretrained_visual_model=True)
parser.add_argument('-fpm', '--frozen-visual-model', dest='frozen_visual_model', action='store_true', help='if using resnet-18 or maskrcnn, freeze weights')
parser.add_argument('-tpm', '--train-visual-model', dest='frozen_visual_model', action='store_false', help='if using resnet-18 or maskrcnn, allow weights to change')
parser.set_defaults(frozen_visual_model=True)
parser.add_argument('-ei', '--eval-interval', type=int, default=100, help='number of training steps between evaluations')
parser.add_argument('-te', '--train-episodes', type=int, default=10, help='number of episodes to evaluate live on train seen scenes and trajectories')
parser.add_argument('-vse', '--valid-seen-episodes', type=int, default=10, help='number of episodes to evaluate live on validation seen scenes and trajectories')
parser.add_argument('-vue', '--valid-unseen-episodes', type=int, default=10, help='number of episodes to evaluate live on validation unseen scenes and trajectories')
parser.add_argument('--scene-numbers', type=int, nargs='+', default=None, help='if set, scene numbers of scenes to use. use either this or --scene-types argument (default: None)')
parser.add_argument('--scene-types', type=str, nargs='+', default=['kitchen', 'living_room', 'bedroom', 'bathroom'], help='allowed scene types. use either this or --scene-numbers argument. (\'kitchen\', \'living_room\', \'bedroom\', and/or \'bathroom\')')
parser.add_argument('-ms', '--max-steps', type=float, default=100000, help='max training gradient steps')
parser.add_argument('-do', '--dropout', type=float, default=0.0, help='dropout prob')
parser.add_argument('-sp', '--save-path', type=str, default=None, help='path (directory) to save models and tensorboard stats')
parser.add_argument('-si', '--save-intermediate', dest='save_intermediate', action='store_true', help='save intermediate checkpoints (once per eval interval)')
parser.add_argument('-nsi', '--no-save-intermediate', dest='save_intermediate', action='store_false', help='don\'t save intermediate checkpoints (once per eval interval)')
parser.set_defaults(save_intermediate=False)
parser.add_argument('-sv', '--save-images-video', dest='save_images_video', action='store_true', help='save images and video (for trajectories, every eval interval)')
parser.add_argument('-nsv', '--no-save-images-video', dest='save_images_video', action='store_false', help='don\'t save images and video (for trajectories, every eval interval)')
parser.set_defaults(save_images_video=False)
parser.add_argument('--save-trajectory-info', dest='save_trajectory_info', action='store_true', help='save trajectory info to reproduce trajectories')
parser.add_argument('--no-save-trajectory-info', dest='save_trajectory_info', action='store_false', help='don\'t save trajectory info to reproduce trajectories')
parser.set_defaults(save_trajectory_info=False)
parser.add_argument('-lp', '--load-path', type=str, default=None, help='path (.pth) to load model checkpoint from')
parser.add_argument('-g', '--gpu', type=int, default=3, help='GPU to run model on, used for superivsed find (default: 3)')
parser.add_argument('--gpu-ids', type=int, nargs='+', default=None, help='GPU ids to run model on, used for interaction exploration. default of None means run on CPU (default: None)')
parser.add_argument('-np', '--num-processes', type=int, default=1, help='number of worker processes, currently only supported for rl interaction exploration (default: 1)')
parser.add_argument('--shared-optimizer', dest='shared_optimizer', action='store_true', help='use a shared optimizer (e.g. SharedAdam)')
parser.add_argument('--separate-optimizers', dest='shared_optimizer', action='store_false', help='use separate optimizer for each worker process')
parser.set_defaults(shared_optimizer=False)
'''
parser.add_argument('-sn', '--save-name', type=str, default='model', help='model save name')
parser.add_argument('-id', '--model-id', type=str, default='model', help='model id')
'''

# supervised_find arguments
parser.add_argument('-oed', '--object-embedding-dim', type=int, default=16, help='object embedding dim')
parser.add_argument('-ilo', '--init-lstm-object', dest='init_lstm_object', action='store_true', help='use object embedding to initialize lstm hidden state')
parser.add_argument('-ilz', '--init-lstm-zero', dest='init_lstm_object', action='store_false', help='initialize lstm hidden state to zeros')
parser.set_defaults(init_lstm_object=False)
parser.add_argument('-tf', '--teacher-force', dest='teacher_force', action='store_true')
parser.add_argument('-ntf', '--no-teacher-force', dest='teacher_force', action='store_false')
parser.set_defaults(teacher_force=False)
parser.add_argument('-ct', '--crow-threshold', type=float, default=None, help='crow distance threshold for success on live rollouts')
parser.add_argument('-at', '--action-threshold', type=int, default=None, help='action distance threshold for success on live rollouts')
parser.add_argument('-wt', '--walking-threshold', type=int, default=None, help='walking distance threshold for success on live rollouts')
parser.add_argument('-dp', '--dataset-path', type=str, default=None, help='path (directory) to dataset indexes of trajectories and obj_type_to_index, if using')
parser.add_argument('-hri', '--high-res-images', dest='high_res_images', action='store_true', help='whether the provided dataset uses images from high_res_images directories')
parser.add_argument('-ri', '--raw-images', dest='high_res_images', action='store_false', help='whether the provided dataset uses images from raw_images directories')
parser.set_defaults(high_res_images=False)
parser.add_argument('-dw', '--dataloader-workers', type=int, default=1, help='number of dataloader workers (total workers is this times three, since one for train, valid_seen, and valid_unseen)')
parser.add_argument('-bs', '--batch-size', type=int, default=1, help='batch size of training trajectories')

# rl_interaction arguments
# SLIC superpixel arguments
parser.add_argument('--slic-max-iter', type=int, default=10, help='maximum iterations of k-means for slic (default: 10)')
parser.add_argument('--slic-max-size-factor', type=float, default=3, help='proportion of max connected segment size (default: 3)')
parser.add_argument('--slic-n-segments', type=int, default=10, help='approx number of segments (default: 10)')
parser.add_argument('--slic-compactness', type=float, default=10.0, help='balances color proximity and space proximity, higher values give more weight to space proximity, making superpixel shapes more square (default: 10.0)')
parser.add_argument('--slic-sigma', type=int, default=0, help='width of Gaussian smoothing kernel, 0 means no smoothing (default: 0)')
parser.add_argument('--slic-min-size-factor', type=float, default=0.01, help='proportion of the minimum segment size to be removed with respect to the supposed segment size (default: 0.01)')
# Other superpixel construction arguments
parser.add_argument('--boundary-pixels', type=int, default=0, help='pixels to expand the boundary of superpixel bounding boxes by (default: 0)')
parser.add_argument('--neighbor-depth', type=int, default=0, help='number of superpixel neighbors to include when calculating superpixel bounding boxes (default: 0)')
parser.add_argument('--neighbor-connectivity', type=int, default=2, help='2 to include diagonal adjacency when finding neighboring superpixels, 1 not to (default: 2)')
parser.add_argument('--black-outer', dest='black_outer', action='store_true', help='set pixels inside bounding box but outside superpixel to (0, 0, 0)')
parser.add_argument('--no-black-outer', dest='black_outer', action='store_false', help='keep pixels inside bounding box but outside superpixel as their original values')
parser.set_defaults(black_outer=False)
parser.add_argument('--use-gt-segmentation', dest='use_gt_segmentation', action='store_true', help='use ground truth segmentation instead of superpixels')
parser.add_argument('--use-superpixels', dest='use_gt_segmentation', action='store_false', help='use superpixels instead of ground truth segmentations')
parser.set_defaults(use_gt_segmentation=False)

# InteractionExploration environment options
parser.add_argument('--single-interact', dest='single_interact', action='store_true', help='only use a single action for all object interactions')
parser.add_argument('--complex-interact', dest='single_interact', action='store_false', help='use different interact actions')
parser.set_defaults(single_interact=False)
parser.add_argument('--sample-contextual-action', dest='sample_contextual_action', action='store_true', help='sample contextual action for single interact action')
parser.add_argument('--no-sample-contextual-action', dest='sample_contextual_action', action='store_false', help='do not sample contextual action for single interact action')
parser.set_defaults(sample_contextual_action=False)
parser.add_argument('--use-masks', dest='use_masks', action='store_true', help='use interaction masks')
parser.add_argument('--no-use-masks', dest='use_masks', action='store_false', help='do not use interaction masks (use contextual interaction with object closest to center of view)')
parser.set_defaults(use_masks=False)
parser.add_argument('--random-object-positions', dest='random_object_positions', action='store_true', help='randomize object positions for each episode')
parser.add_argument('--fixed-object-positions', dest='random_object_positions', action='store_false', help='keep object positions fixed in each scene')
parser.set_defaults(random_object_positions=False)
parser.add_argument('--random-position', dest='random_position', action='store_true', help='randomize start position for each episode')
parser.add_argument('--fixed-position', dest='random_position', action='store_false', help='keep start position fixed in each scene')
parser.set_defaults(random_position=False)
parser.add_argument('--random-rotation', dest='random_rotation', action='store_true', help='randomize start rotation for each episode')
parser.add_argument('--fixed-rotation', dest='random_rotation', action='store_false', help='keep start rotation fixed in each scene')
parser.set_defaults(random_rotation=False)
parser.add_argument('--random-look-angle', dest='random_look_angle', action='store_true', help='randomize start look angle for each episode')
parser.add_argument('--fixed-look-angle', dest='random_look_angle', action='store_false', help='keep start look angle fixed in each scene')
parser.set_defaults(random_look_angle=False)

# Reward config arguments
parser.add_argument('--reward-config-name', type=str, default='InteractionExplorationDefault', help='name of reward config to use in models/config/rewards.json (default: InteractionExplorationDefault)')
parser.add_argument('--reward-rotations-look-angles', dest='reward_rotations_look_angles', action='store_true', help='give new state reward for rotations and look angles')
parser.add_argument('--no-reward-rotations-look-angles', dest='reward_rotations_look_angles', action='store_false', help='do not give new state reward for rotations and look angles')
parser.set_defaults(reward_rotations_look_angles=False)
parser.add_argument('--reward-state-changes', dest='reward_state_changes', action='store_true', help='give new state reward for object state changes')
parser.add_argument('--no-reward-state-changes', dest='reward_state_changes', action='store_false', help='do not give new state reward for object state changes')
parser.set_defaults(reward_state_changes=True)
parser.add_argument('--reward-persist-state', dest='reward_persist_state', action='store_true', help='keep internal reward state over different trajectories')
parser.add_argument('--reward-reset-state', dest='reward_persist_state', action='store_false', help='reset internal reward state every trajectory')
parser.set_defaults(reward_persist_state=False)
parser.add_argument('--reward-repeat-discount', type=float, default=0.0, help='the discount factor to apply to the rewards for repeated actions (default: 0.0)')
parser.add_argument('--reward-use-novelty', dest='reward_use_novelty', action='store_true', help='use novelty reward (proportional to 1 / sqrt(times_visited) instead of repeat discount)')
parser.add_argument('--reward-use-discount', dest='reward_use_novelty', action='store_false', help='use exponential discount reward (proportional to reward-repeat-discount ^ times_visited)')
parser.set_defaults(reward_use_novelty=False)

# Model parameters
parser.add_argument('--use-visual-feature', dest='use_visual_feature', action='store_true', help='use visual model and pass visual scene features as input to policy model')
parser.add_argument('--no-visual-feature', dest='use_visual_feature', action='store_false', help='don\'t use visual model to process visual scene features as input to policy model. policy model only takes superpixel context (--superpixel-context argument should be set to something)')
parser.set_defaults(use_visual_feature=True)
parser.add_argument('--superpixel-context', type=str, default=None, help='whether to include superpixel context vector as input to policy model, and mode (\'hidden\' or \'scene\')')
parser.add_argument('--separate-superpixel-model', dest='separate_superpixel_model', action='store_true', help='use a separate superpixel visual model than scene features')
parser.add_argument('--no-separate-superpixel-model', dest='separate_superpixel_model', action='store_false', help='use visual_model to get superpixel features')
parser.set_defaults(separate_superpixel_model=False)
parser.add_argument('--superpixel-model', type=str, default='resnet', help='which model to use for superpixels (only \'resnet\' supported for now). only used if --separate-superpixel-model is True')
parser.add_argument('--superpixel-fc-units', type=int, nargs='+', default=None, help='dimensions for superpixel fc layers, for the features of the superpixel frame crops to be fed through post-superpixel model (default: None). still used even if --separate-superpixel-model is False')
parser.add_argument('--action-embedding-dim', type=int, default=16, help='dimension for action embeddings (default: 16)')
parser.add_argument('--action-fc-units', type=int, nargs='+', default=None, help='dimensions for action fc layers INCLUDING logits if applicable, None for no logits (default: None)')
parser.add_argument('--value-fc-units', type=int, nargs='+', default=None, help='dimensions for value fc layers before final value, None for no intermediate layers (default: None)')
parser.add_argument('--visual-fc-units', type=int, nargs='+', default=None, help='dimensions for visual fc layers (default: None)')
parser.add_argument('--prev-action-after-lstm', dest='prev_action_after_lstm', action='store_true', help='concatenate previous action to lstm output (hidden state)')
parser.add_argument('--no-prev-action-after-lstm', dest='prev_action_after_lstm', action='store_false', help='do not concatenate previous action to lstm output (hidden state)')
parser.set_defaults(prev_action_after_lstm=False)
parser.add_argument('--use-tanh', dest='use_tanh', action='store_true', help='use tanh for activations instead of relu')
parser.add_argument('--use-relu', dest='use_tanh', action='store_false', help='use relu for activations instead of tanh')
parser.set_defaults(use_tanh=True)
parser.add_argument('--max-trajectory-length', type=int, default=None, help='max length of trajectory rollouts')
parser.add_argument('--gamma', type=float, default=1.0, help='discount factor (default: 1.0)')
parser.add_argument('--tau', type=float, default=1.0, help='decay term (bias/variance tradeoff) for GAE, lambda in the paper (default: 1.0)')
parser.add_argument('--value-loss-coefficient', type=float, default=0.5, help='coefficient for value loss (default: 0.5)')
parser.add_argument('--entropy-coefficient', type=float, default=0.01, help='coefficient for entropy in loss (default: 0.01)')
parser.add_argument('--sample-action', dest='sample_action', action='store_true', help='sample action from softmax logits')
parser.add_argument('--no-sample-action', dest='sample_action', action='store_false', help='take argmax of action logits')
parser.set_defaults(sample_action=True)
parser.add_argument('--sample-mask', dest='sample_mask', action='store_true', help='sample mask from softmax logits')
parser.add_argument('--no-sample-mask', dest='sample_mask', action='store_false', help='take argmax of mask logits')
parser.set_defaults(sample_mask=True)
parser.add_argument('--fusion-model', type=str, default='SuperpixelFusion', help='model to use to combine visual model, policy model, superpixel model, action embeddings (\'SuperpixelFusion\' or \'SuperpixelActionConcat\')')
parser.add_argument('--superpixelactionconcat-add-superpixel-action', dest='superpixelactionconcat_add_superpixel_action', action='store_true', help='add superpixel feature and action embedding for each action+SP pair, instead of concatenating. for this. action_embedding_dim and superpixel_feature_size should be the same dimension (512 for ResNet-18)')
parser.add_argument('--superpixelactionconcat-concat-superpixel-action', dest='superpixelactionconcat_add_superpixel_action', action='store_false', help='concat superpixel feature and action embedding for each action+SP pair')
parser.set_defaults(superpixelactionconcat_add_superpixel_action=False)
parser.add_argument('--zero-null-superpixel-features', dest='zero_null_superpixel_features', action='store_true', help='use zeroes for null superpixel feature choices in SuperpixelActionConcat')
parser.add_argument('--average-null-superpixel-features', dest='zero_null_superpixel_features', action='store_false', help='use average of superpixel features for that image for null superpixel feature choices in SuperpixelActionConcat')
parser.set_defaults(zero_null_superpixel_features=True)
parser.add_argument('--outer-product-sampling', dest='outer_product_sampling', action='store_true', help='use outer product of softmax of superpixel scores and softmax of action output logits for sampling - only works with SuperpixelFusion')
parser.add_argument('--separate-action-mask-sampling', dest='outer_product_sampling', action='store_false', help='sample action from action logits separately from mask and mask logits - only works with SuperpixelFusion')
parser.set_defaults(outer_product_sampling=False)
parser.add_argument('--inverse-score', dest='inverse_score', action='store_true', help='sample actions (and/or superpixels) by sampling from the softmax over -score')
parser.add_argument('--no-inverse-score', dest='inverse_score', action='store_false', help='sample actions by taking softmax directly over actions (and/or) superpixel scores')
parser.set_defaults(inverse_score=False)
parser.add_argument('--navigation-superpixels', dest='navigation_superpixels', action='store_true', help='pair navigation actions with superpixels along with interaction actions. works differently for SuperpixelFusion + outer_product_sampling and SuperpixelActionConcat, and zero_null_superpixel_features will not be used.')
parser.add_argument('--no-navigation-superpixels', dest='navigation_superpixels', action='store_false', help='only have one navigation action (do not pair with superpixels)')
parser.set_defaults(inverse_score=False)
parser.add_argument('--seen-state-loss-coefficient', type=float, default=None, help='coefficient for supervised seen state aux loss, unset to turn off aux loss (default: None)')

# Curiosity (intrinsic reward) config
parser.add_argument('--use-curiosity', dest='use_curiosity', action='store_true', help='use curiosity intrinsic reward')
parser.add_argument('--no-use-curiosity', dest='use_curiosity', action='store_false', help='don\'t use curiosity intrinsic reward')
parser.set_defaults(use_curiosity=False)
parser.add_argument('--curiosity-forward-fc-units', type=int, nargs='+', default=[256, 512], help='dimensions for curiosity forward model fc layers, last must be size of visual feature (default: [256, 512])')
parser.add_argument('--curiosity-inverse-fc-units', type=int, nargs='+', default=[256, 16], help='dimensions for curiosity inverse model fc layers, last must be size of action embeddings (default: [256, 16])')
parser.add_argument('--curiosity-eta', type=float, default=0.01, help='coefficient for scaling curiosity reward (default: 0.01)')
parser.add_argument('--curiosity-beta', type=float, default=0.2, help='how much to use inverse loss for curiosity (1 - beta) versus forward loss (beta) (default: 0.01)')
parser.add_argument('--curiosity-visual-encoder', type=str, default='resnet', help='which visual encoder to use for curiosity (\'resnet\' only supported for now)')
parser.add_argument('--curiosity-loss-coefficient', type=float, default=10, help='coefficient for curiosity loss (default: 10)')

def parse_args():
    return parser.parse_args()
